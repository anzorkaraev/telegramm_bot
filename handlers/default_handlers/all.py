from datetime import date

from database.botbase import User

from loader import bot
from site_APi.request_to_api import get_iata_code
from states.all_tickets import AllTickets
from telebot.types import Message

from utils.checking_the_date import Date
from utils.create_database_entry import database_entry
from utils.output_of_query_results import finding_one_way_ticket, finding_two_way_ticket


@bot.message_handler(commands=['all'])
def search_ticket(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ(origin), –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    :param message:
    :return:
    """
    bot.set_state(message.from_user.id, AllTickets.origin, message.chat.id)
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è\n'
                                      f'<b>–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!</b>', parse_mode='html')


@bot.message_handler(state=AllTickets.origin)
def get_origin(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ç–æ—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ(destination). –ü–æ–ª—É—á–∞–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç
    –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
    :param message:
    :return:
    """
    try:
        origin_city, destination_city = message.text.split(' ')
        iata_city_code = get_iata_code(origin_city, destination_city)

        if iata_city_code == 'error':
            bot.send_message(message.chat.id, '–í—ã—à–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.\n'
                                              '–í–æ–∑–º–æ–∂–Ω–æ —É –≤–∞—Å –ø–ª–æ—Ö–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ç—å—é –ò–Ω—Ç–µ—Ä–Ω–µ—Ç\n'
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            bot.delete_state(message.from_user.id, message.chat.id)

        elif len(iata_city_code) == 0:
            bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n'
                                              '–í–æ–∑–º–æ–∂–Ω–æ –≤ –æ–¥–Ω–æ–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ—Ç –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞,\n'
                                              '–õ–∏–±–æ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞\n'
                                              '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')

        else:
            today = date.today()
            bot.send_message(message.chat.id,
                             f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î –ú–ú</b> –ª–∏–±–æ <b>–î–î –ú–ú –ì–ì–ì–ì</b>\n'
                             f'–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!\n'
                             f'\n'
                             f'–°–µ–≥–æ–¥–Ω—è {today.strftime("%d.%m.%Y")}', parse_mode='html')
            bot.set_state(message.from_user.id, AllTickets.depart_date, message.chat.id)

            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['origin'] = origin_city.capitalize()
                data['origin_iata'] = iata_city_code['origin']['iata']
                data['destination'] = destination_city.capitalize()
                data['destination_iata'] = iata_city_code['destination']['iata']
    except ValueError:
        bot.send_message(message.chat.id, '–î–ª—è –ø–æ–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è')


@bot.message_handler(state=AllTickets.depart_date)
def get_depart_date(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–µ—Ç–≤—ë—Ä—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ(return_date)
    :param message:
    :return:
    """
    try:
        day, month, year = Date.splitting_the_date(message.text)
        dep_date = f'{year}-{month}-{day}'

        if Date.is_date_valid(dep_date):
            today = date.today()
            bot.send_message(message.chat.id, f'–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –±–∏–ª–µ—Ç –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É, '
                                              f'–≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î –ú–ú</b>'
                                              f' –ª–∏–±–æ <b>–î–î –ú–ú –ì–ì–ì–ì</b>\n'
                                              f'–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!\n'
                                              f'–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ <b>–ù–µ—Ç</b>\n'
                                              f'\n'
                                              f'–°–µ–≥–æ–¥–Ω—è {today.strftime("%d.%m.%Y")}', parse_mode='html')
            bot.set_state(message.from_user.id, AllTickets.return_date, message.chat.id)

            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['depart_date'] = dep_date
        else:
            bot.send_message(message.chat.id, '–£–ø—Åüôä\n'
                                              '–ö–∞–∂–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n'
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n'
                                          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')


@bot.message_handler(state=AllTickets.return_date)
def get_return_date(message: Message):
    if message.text.lower() == '–Ω–µ—Ç':
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['return_date'] = None
        finding_one_way_ticket(
            message, origin_i=data['origin_iata'], destination_i=data['destination_iata'],
            origin=data['origin'], destination=data['destination'], dep_date=data['depart_date']
        )
        database_entry(
            user=User.get(user_id=message.from_user.id), orig=data['origin'], orig_i=data['origin_iata'],
            dest=data['destination'], dest_i=data['destination_iata'], dep_date=data['depart_date'],
            ret_date=data['return_date']
        )
        bot.delete_state(message.from_user.id, message.chat.id)
    else:
        try:
            day, month, year = Date.splitting_the_date(message.text)
            ret_date = f'{year}-{month}-{day}'

            if Date.is_date_valid(ret_date):
                with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                    data['return_date'] = ret_date

                finding_two_way_ticket(
                    message, origin_i=data['origin_iata'], destination_i=data['destination_iata'],
                    origin=data['origin'], destination=data['destination'], dep_date=data['depart_date'],
                    ret_date=data['return_date']
                )
                database_entry(
                    user=User.get(user_id=message.from_user.id), orig=data['origin'], orig_i=data['origin_iata'],
                    dest=data['destination'], dest_i=data['destination_iata'], dep_date=data['depart_date'],
                    ret_date=data['return_date']
                )
                bot.delete_state(message.from_user.id, message.chat.id)

            else:
                raise ValueError
        except ValueError:
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n'
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')


if __name__ == '__main__':
    search_ticket()
