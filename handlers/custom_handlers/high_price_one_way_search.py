from datetime import date, datetime

from database.botbase import TicketsInfo, User
from keyboards.inline.button_for_booking import reserve
from keyboards.inline.weather import weather

from loader import bot
from site_APi.request_to_api import get_iata_code, get_tickets_price
from states.high_price_one_way import HighPriceOneWay
from telebot.types import Message

from utils.bot_logger import BotLogger
from utils.checking_the_date import Date

logger = BotLogger('logs.log')


@bot.message_handler(func=lambda message: message.text == '–¢–æ–ª—å–∫–æ —Ç—É–¥–∞ ‚û°Ô∏è')
def search_ticket(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ(origin), –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    :param message:
    :return:
    """
    bot.set_state(message.from_user.id, HighPriceOneWay.origin, message.chat.id)
    bot.send_message(message.chat.id, f'–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è')


@bot.message_handler(state=HighPriceOneWay.origin)
def get_origin(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ç–æ—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ(destination). –ü–æ–ª—É—á–∞–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç
    –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
    :param message:
    :return:
    """
    bot.send_message(message.chat.id, '–ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è')
    bot.set_state(message.from_user.id, HighPriceOneWay.destination, message.chat.id)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['origin'] = message.text


@bot.message_handler(state=HighPriceOneWay.destination)
def get_destination(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ—Ç—å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ(depart_date). –ü–æ–ª—É—á–∞–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç
    –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
    :param message:
    :return:
    """

    today = date.today()
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î –ú–ú –ì–ì–ì–ì</b>\n'
                                      f'–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!\n'
                                      f'\n'
                                      f'–°–µ–≥–æ–¥–Ω—è {today.strftime("%d.%m.%Y")}', parse_mode='html')
    bot.set_state(message.from_user.id, HighPriceOneWay.depart_date, message.chat.id)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['destination'] = message.text

        iata_city_code = get_iata_code(data['origin'], data['destination'])
        if len(iata_city_code) == 0:
            bot.send_message(message.chat.id, 'ü´¢ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n'
                                              '–í–æ–∑–º–æ–∂–Ω–æ –≤ –æ–¥–Ω–æ–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ—Ç –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞,\n'
                                              '–õ–∏–±–æ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞\n'
                                              '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            bot.delete_state(message.from_user.id, message.chat.id)
        data['origin_iata'] = iata_city_code['origin']['iata']
        data['destination_iata'] = iata_city_code['destination']['iata']


@bot.message_handler(state=HighPriceOneWay.depart_date)
def get_return_date(message: Message):
    try:
        day, month, year = message.text.split()
        dep_date = f'{year}-{month}-{day}'

        if Date.is_date_valid(dep_date):
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['depart_date'] = dep_date

                ticket_price = get_tickets_price(
                    orig=data['origin_iata'], dest=data['destination_iata'],
                    dep_date=data['depart_date'], way='true'
                )

                if ticket_price['success'] is not True:
                    bot.send_message(message.chat.id, '‚ùé –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n'
                                                      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
                    bot.delete_state(message.from_user.id, message.chat.id)

                high_price_ticket = sorted(ticket_price['data'], key=lambda x: x['price'], reverse=True)
                logger.log_info(f'high one {high_price_ticket}')

                dep_date_text = datetime.strptime(
                    high_price_ticket[0]["departure_at"], '%Y-%m-%dT%H:%M:%S%z'
                )

                text = (
                    f'<b>{data["origin"].capitalize()} - {data["destination"].capitalize()}</b>\n\n'
                    f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è üïë :\n{dep_date_text.date()} - {dep_date_text.time()}\n'
                    f'–¶–µ–Ω–∞ üìà : <b>{high_price_ticket[0]["price"]} {ticket_price["currency"]}</b>\n'
                    f'–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ #Ô∏è‚É£ : {high_price_ticket[0]["flight_number"]}\n'
                    f'–ö–æ–ª-–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –Ω–∞ –ø—É—Ç–∏ ‚û°Ô∏è‚õîÔ∏è: {high_price_ticket[0]["transfers"]}\n'
                )

                bot.send_message(message.chat.id, text, reply_markup=reserve(high_price_ticket[0]['link']),
                                 parse_mode='html')
                bot.send_message(message.chat.id,
                                 f'–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {data["destination"].capitalize()}?',
                                 reply_markup=weather(data['destination']))

                TicketsInfo.create(
                    user_id=User.get(user_id=message.from_user.id),
                    origin=data['origin'],
                    origin_iata=data['origin_iata'],
                    destination=data['destination'],
                    destination_iata=data['destination_iata'],
                    depart_date=data['depart_date']
                )
                bot.delete_state(message.from_user.id, message.chat.id)
        else:
            bot.send_message(message.chat.id, '–£–ø—Åüôä\n'
                                              '–ö–∞–∂–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n'
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n'
                                          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')


@bot.message_handler(state=HighPriceOneWay.api_request)
def ticket_request_h(message: Message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        ticket_price = get_tickets_price(
            orig=data['origin_iata'], dest=data['destination_iata'],
            dep_date=data['depart_date'], way='true'
        )

        if ticket_price['success'] is not True:
            bot.send_message(message.chat.id, '‚ùé –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n'
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            bot.delete_state(message.from_user.id, message.chat.id)

        high_price_ticket = sorted(ticket_price['data'], key=lambda x: x['price'], reverse=True)
        logger.log_info(f'high one {high_price_ticket}')

        dep_date_text = datetime.strptime(
            high_price_ticket[0]["departure_at"], '%Y-%m-%dT%H:%M:%S%z'
        )

        text = (
            f'<b>{data["origin"].capitalize()} - {data["destination"].capitalize()}</b>\n\n'
            f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è üïë :\n{dep_date_text.date()} - {dep_date_text.time()}\n'
            f'–¶–µ–Ω–∞ üìà : <b>{high_price_ticket[0]["price"]} {ticket_price["currency"]}</b>\n'
            f'–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ #Ô∏è‚É£ : {high_price_ticket[0]["flight_number"]}\n'
            f'–ö–æ–ª-–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –Ω–∞ –ø—É—Ç–∏ ‚û°Ô∏è‚õîÔ∏è: {high_price_ticket[0]["transfers"]}\n'
        )

        bot.send_message(message.chat.id, text, reply_markup=reserve(high_price_ticket[0]['link']), parse_mode='html')
        bot.send_message(message.chat.id, f'–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {data["destination"].capitalize()}?',
                         reply_markup=weather(data['destination']))
        bot.delete_state(message.from_user.id, message.chat.id)


if __name__ == '__main__':
    search_ticket()
