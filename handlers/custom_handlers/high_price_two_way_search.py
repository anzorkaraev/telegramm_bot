from datetime import date, datetime

from database.botbase import TicketsInfo, User
from keyboards.inline.weather import weather
from keyboards.reply.start_the_search import start_search

from loader import bot
from site_APi.request_to_api import get_iata_code, get_tickets_price
from states.high_price_two_way import HighPriceTwoWay
from telebot.types import Message

from utils.checking_the_date import Date


@bot.message_handler(func=lambda message: message.text == '–¢—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ üîÅ')
def search_ticket(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ(origin), –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    :param message:
    :return:
    """
    bot.set_state(message.from_user.id, HighPriceTwoWay.origin, message.chat.id)
    bot.send_message(message.chat.id, f'–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è')


@bot.message_handler(state=HighPriceTwoWay.origin)
def get_origin(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ç–æ—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ(destination). –ü–æ–ª—É—á–∞–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç
    –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
    :param message:
    :return:
    """
    iata_city_code = get_iata_code(message.text, '–ú–æ—Å–∫–≤–∞')
    if len(iata_city_code) == 0:
        bot.send_message(message.chat.id, 'ü´¢ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n'
                                          '–í–æ–∑–º–æ–∂–Ω–æ –≤ –æ–¥–Ω–æ–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ—Ç –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞,\n'
                                          '–õ–∏–±–æ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞\n'
                                          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    else:
        bot.send_message(message.chat.id, '–ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è')
        bot.set_state(message.from_user.id, HighPriceTwoWay.destination, message.chat.id)

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['origin'] = message.text
            data['origin_iata'] = iata_city_code['origin']['iata']


@bot.message_handler(state=HighPriceTwoWay.destination)
def get_destination(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ—Ç—å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ(depart_date). –ü–æ–ª—É—á–∞–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç
    –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
    :param message:
    :return:
    """

    iata_city_code = get_iata_code('–ú–æ—Å–∫–≤–∞', message.text)
    if len(iata_city_code) == 0:
        bot.send_message(message.chat.id, 'ü´¢ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n'
                                          '–í–æ–∑–º–æ–∂–Ω–æ –≤ –æ–¥–Ω–æ–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ—Ç –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞,\n'
                                          '–õ–∏–±–æ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞\n'
                                          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    else:
        today = date.today()
        bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î –ú–ú</b> –ª–∏–±–æ <b>–î–î –ú–ú –ì–ì–ì–ì</b>\n'
                                          f'–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!\n'
                                          f'\n'
                                          f'–°–µ–≥–æ–¥–Ω—è {today.strftime("%d.%m.%Y")}', parse_mode='html')
        bot.set_state(message.from_user.id, HighPriceTwoWay.depart_date, message.chat.id)

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['destination'] = message.text
            data['destination_iata'] = iata_city_code['destination']['iata']


@bot.message_handler(state=HighPriceTwoWay.depart_date)
def get_depart_date(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–µ—Ç–≤—ë—Ä—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ(return_date)
    :param message:
    :return:
    """
    try:
        day, month, year = Date.splitting_the_date(message.text)
        dep_date = f'{year}-{month}-{day}'

        if Date.is_date_valid(dep_date):
            today = date.today()
            bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î –ú–ú</b> '
                                              f'–ª–∏–±–æ <b>–î–î –ú–ú –ì–ì–ì–ì</b>\n'
                                              f'–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!\n'
                                              f'\n'
                                              f'–°–µ–≥–æ–¥–Ω—è {today.strftime("%d.%m.%Y")}', parse_mode='html')
            bot.set_state(message.from_user.id, HighPriceTwoWay.return_date, message.chat.id)

            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['depart_date'] = dep_date
        else:
            bot.send_message(message.chat.id, '–£–ø—Åüôä\n'
                                              '–ö–∞–∂–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n'
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n'
                                          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')


@bot.message_handler(state=HighPriceTwoWay.return_date)
def get_return_date(message: Message):
    try:
        day, month, year = Date.splitting_the_date(message.text)
        ret_date = f'{year}-{month}-{day}'

        if Date.is_date_valid(ret_date):
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['return_date'] = ret_date

            ticket_price = get_tickets_price(
                orig=data['origin_iata'], dest=data['destination_iata'],
                dep_date=data['depart_date'], ret_date=data['return_date']
            )

            if ticket_price['success'] is not True or len(ticket_price['data']) == 0:
                bot.send_message(message.chat.id, '‚ùé –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n'
                                                  '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=start_search())
                bot.delete_state(message.from_user.id, message.chat.id)

            else:
                high_price_ticket = sorted(ticket_price['data'], key=lambda x: x['price'], reverse=True)

                dep_date_text = datetime.strptime(
                    high_price_ticket[0]["departure_at"], '%Y-%m-%dT%H:%M:%S%z'
                )
                ret_date_text = datetime.strptime(
                    high_price_ticket[0]["return_at"], '%Y-%m-%dT%H:%M:%S%z'
                )

                text = (
                    f'<b>{data["origin"].capitalize()} - {data["destination"].capitalize()}</b>\n\n'
                    f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è üïë :\n{dep_date_text.date()} - {dep_date_text.time()}\n'
                    f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è üïó :\n{ret_date_text.date()} - {ret_date_text.time()}\n'
                    f'–¶–µ–Ω–∞ üìà : <b>{high_price_ticket[0]["price"]} {ticket_price["currency"]}</b>\n'
                    f'–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ #Ô∏è‚É£ : {high_price_ticket[0]["flight_number"]}\n'
                    f'–ö–æ–ª-–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –Ω–∞ –ø—É—Ç–∏ ‚û°Ô∏è‚õîÔ∏è: {high_price_ticket[0]["transfers"]}\n'
                    f'–ö–æ–ª-–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–º –ø—É—Ç–∏ ‚õîÔ∏è‚¨ÖÔ∏è: {high_price_ticket[0]["return_transfers"]}'
                )

                bot.send_message(
                    message.chat.id, text,
                    reply_markup=weather(high_price_ticket[0]['link'], data['destination']),
                    parse_mode='html'
                )
                bot.send_message(
                    message.chat.id,
                    f'–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–≥–æ–¥–∞", –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, '
                    f'–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {data["destination"].capitalize()}',
                    reply_markup=start_search()
                )

            TicketsInfo.create(
                user_id=User.get(user_id=message.from_user.id),
                origin=data['origin'],
                origin_iata=data['origin_iata'],
                destination=data['destination'],
                destination_iata=data['destination_iata'],
                depart_date=data['depart_date'],
                return_date=data['return_date']
            )
            bot.delete_state(message.from_user.id, message.chat.id)
        else:
            bot.send_message(message.chat.id, '–£–ø—Åüôä\n'
                                              '–ö–∞–∂–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n'
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n'
                                          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')


if __name__ == '__main__':
    search_ticket()
