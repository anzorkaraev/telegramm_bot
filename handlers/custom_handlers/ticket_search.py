from datetime import date, datetime

from telegram_bot_calendar import WMonthTelegramCalendar

from database.botbase import TicketsInfo, User
from keyboards.inline.button_for_booking import reserve
from keyboards.reply.further import further_button

from loader import bot
from site_APi.request_to_api import get_iata_code, get_tickets_price, get_weather
from states.ticket_search_states import TicketsSearchState
from telebot.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from utils.bot_logger import BotLogger


logger = BotLogger('logs.log')


@bot.message_handler(func=lambda message: message.text == '–í –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã üîÅ')
def search_ticket(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ(origin), –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    :param message:
    :return:
    """
    bot.set_state(message.from_user.id, TicketsSearchState.origin, message.chat.id)
    bot.send_message(message.chat.id, f'–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è')


@bot.message_handler(state=TicketsSearchState.origin)
def get_origin(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ç–æ—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ(destination). –ü–æ–ª—É—á–∞–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç
    –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
    :param message:
    :return:
    """
    bot.send_message(message.chat.id, '–ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è')
    bot.set_state(message.from_user.id, TicketsSearchState.destination, message.chat.id)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['origin'] = message.text


@bot.message_handler(state=TicketsSearchState.destination)
def get_destination(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ—Ç—å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ(depart_date). –ü–æ–ª—É—á–∞–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç
    –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
    :param message:
    :return:
    """
    depart_calendar = WMonthTelegramCalendar(calendar_id=1, min_date=date.today(), locale='ru').build()

    bot.send_message(message.chat.id, '–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É üóì', reply_markup=depart_calendar)
    bot.set_state(message.from_user.id, TicketsSearchState.depart_date, message.chat.id)

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['destination'] = message.text


@bot.callback_query_handler(func=WMonthTelegramCalendar.func(calendar_id=1))
def get_depart_date(callback: CallbackQuery):
    logger.log_info(f'call {callback}')
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.  –ü–æ–ª—É—á–∞–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç
    –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
    :param callback:
    :return:
    """
    result, key, step = WMonthTelegramCalendar().process(callback.data)
    if not result and key:
        bot.edit_message_text(f"Select {step}",
                              callback.message.chat.id,
                              callback.message.message_id,
                              reply_markup=key)
    elif result:
        mess = bot.edit_message_text(f"{result}",
                                     callback.message.chat.id,
                                     callback.message.message_id)

        with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
            data['depart_date'] = mess.text
            logger.log_info(f'–ø–µ—Ä–≤—ã–π {data}')
        bot.register_next_step_handler(callback.message, return_date_request(callback.message))


@bot.message_handler(state=TicketsSearchState.depart_date)
def return_date_request(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–µ—Ç–≤—ë—Ä—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ(return_date)
    :param message:
    :return:
    """
    return_calendar = WMonthTelegramCalendar(calendar_id=2, min_date=date.today(), locale='ru').build()

    bot.send_message(message.chat.id, '–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è\n')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É üóì', reply_markup=return_calendar)
    bot.set_state(message.from_user.id, TicketsSearchState.return_date, message.chat.id)


@bot.callback_query_handler(func=WMonthTelegramCalendar.func(calendar_id=2), state=TicketsSearchState.return_date)
def get_return_date(callback: CallbackQuery):
    """
     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.  –ü–æ–ª—É—á–∞–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç
    –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
    :param callback:
    :return:
    """
    result, key, step = WMonthTelegramCalendar().process(callback.data)
    if not result and key:
        bot.edit_message_text(f"Select {step}",
                              callback.message.chat.id,
                              callback.message.message_id,
                              reply_markup=key)
    elif result:
        mess = bot.edit_message_text(f"{result}",
                                     callback.message.chat.id,
                                     callback.message.message_id)

        with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
            data['return_date'] = mess.text
            logger.log_info(f'return {data}')
        bot.register_next_step_handler(callback.message, create_database_entry(callback.message))


@bot.message_handler(state=TicketsSearchState.return_date)
def create_database_entry(message: Message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        logger.log_info(f'blyad {data}')
        iata_city_code = get_iata_code(data['origin'], data['destination'])
        if len(iata_city_code) == 0:
            bot.send_message(message.chat.id, 'ü´¢ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n'
                                              '–í–æ–∑–º–æ–∂–Ω–æ –≤ –æ–¥–Ω–æ–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ—Ç –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞,\n'
                                              '–õ–∏–±–æ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞\n'
                                              '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            bot.delete_state(message.from_user.id, message.chat.id)
        data['origin_iata'] = iata_city_code['origin']['iata']
        data['destination_iata'] = iata_city_code['destination']['iata']

        TicketsInfo.create(
            user_id=User.user_id,
            origin=data['origin'],
            origin_iata=data['origin_iata'],
            destination=data['destination'],
            destination_iata=data['destination_iata'],
            depart_date=data['depart_date'],
            return_date=data['return_date']
        )

    bot.set_state(message.from_user.id, TicketsSearchState.api_request, message.chat.id)


@bot.message_handler(state=TicketsSearchState.api_request)
def ticket_request(message: Message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        ticket_price = get_tickets_price(
            orig=data['origin_iata'], dest=data['destination_iata'],
            dep_date=data['depart_date'], ret_date=data['return_date']
        )

        if ticket_price['success'] is not True:
            bot.send_message(message.chat.id, '‚ùé –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n'
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            bot.delete_state(message.from_user.id, message.chat.id)

        low_price_ticket = sorted(ticket_price['data'], key=lambda x: x['price'])

        dep_date_text = datetime.strptime(
            low_price_ticket[0]["departure_at"], '%Y-%m-%dT%H:%M:%S%z'
        )
        ret_date_text = datetime.strptime(
            low_price_ticket[0]["return_at"], '%Y-%m-%dT%H:%M:%S%z'
        )

        text = (
            f'{data["origin"].capitalize()} - {data["destination"].capitalize ()}\n\n'
            f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è üïë :\n{dep_date_text.date()} - {dep_date_text.time()}\n'
            f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è üïó :\n{ret_date_text.date()} - {ret_date_text.time()}\n'
            f'–¶–µ–Ω–∞ üìà : {low_price_ticket[0]["price"]} {ticket_price["currency"]}\n'
            f'–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ #Ô∏è‚É£ : {low_price_ticket[0]["flight_number"]}\n'
            f'–ö–æ–ª-–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –Ω–∞ –ø—É—Ç–∏ ‚û°Ô∏è‚õîÔ∏è: {low_price_ticket[0]["transfers"]}\n'
            f'–ö–æ–ª-–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–º –ø—É—Ç–∏ ‚õîÔ∏è‚¨ÖÔ∏è: {low_price_ticket[0]["return_transfers"]}'
        )

        bot.send_message(message.chat.id, text, reply_markup=reserve(low_price_ticket[0]['link']))
        # bot.send_message(message.chat.id, f'–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {data["destination"].capitalize()}?',
        #                  reply_markup=weather())
        bot.delete_state(message.from_user.id, message.chat.id)


# def weather():
#     keyboard = InlineKeyboardMarkup(row_width=2)
#     btn1 = InlineKeyboardButton('–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞', callback_data='city')
#     btn2 = InlineKeyboardButton('‚ùå', callback_data='close')
#     keyboard.add(btn1, btn2)
#     return keyboard
#
#
# @bot.callback_query_handler(func=lambda call: True, state=TicketsSearchState.api_request)
# def callback(call: CallbackQuery):
#     if call.data == 'close':
#         bot.delete_message(call.message.chat.id, call.message.message_id)
#     if call.data == 'city':
#         with bot.retrieve_data(call.message.from_user.id, call.message.chat.id) as data:
#             dep_city_weather = get_weather(data['destination'])
#             if dep_city_weather['cod'] != 200:
#                 bot.send_message(call.message.chat.id, 'ü´¢ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n'
#                                                        '–í–æ–∑–º–æ–∂–Ω–æ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞\n'
#                                                        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
#             text = (f'{round(dep_city_weather["main"]["temp"])}¬∞\n'
#                     f'{dep_city_weather["weather"][0]["description"].capitalize()}\n'
#                     f'{round(dep_city_weather["main"]["temp_min"])}¬∞ / {round(dep_city_weather["main"]["temp_max"])}¬∞')
#             bot.edit_message_text(f"{text}", call.message.chat.id, call.message.message_id)


if __name__ == '__main__':
    search_ticket()
